{"version":3,"sources":["components/Questionaire/Questionaire.js","components/QuestionsScreen/QuestionScreen.js","components/ChoseDificulty/ChoseDifficulty.js","components/ChoseQuestionsQuantity/ChoseQuestionsQuanity.js","components/App/App.js","index.js"],"names":["Questionaire","showAnswers","handleAnswer","questionsQuantity","currentIndex","data","question","correct_answer","incorrect_answers","shuffledAnswers","sort","Math","random","className","dangerouslySetInnerHTML","__html","map","answer","idx","onClick","QuestionsScreen","categoryDifficulty","id","useState","questions","setQuestions","setCurrentIndex","score","setScore","useEffect","fetch","then","result","json","results","length","window","location","reload","setTimeout","ChoseDifficulty","setCategoryDifficulty","handleDificultyChose","ChoseQuestionsQuanity","handleQuestionQuantity","App","categories","setCategories","categoryChosen","setCategoryChosen","categoryID","setCategoryID","setQuestionQuantity","trivia_categories","name","number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9652f68.chunk.js","sourcesContent":["import React from \"react\";\nimport './Questionaire.scss'\n\n\nexport const Questionaire = ({showAnswers,handleAnswer,questionsQuantity, currentIndex, data: {question, correct_answer, incorrect_answers}}) => {\n\n\n    const shuffledAnswers = [correct_answer, ...incorrect_answers].sort(() => Math.random() - 0.5);\n\n\n    return (\n        <>\n\n\n            <div className=\"question_box\">\n                <p>{currentIndex + 1 }/{questionsQuantity}</p>\n                <h1 className=\"question_box_description\" dangerouslySetInnerHTML={{__html: question}}/>\n            </div>\n            <div className=\"answer\">\n                {shuffledAnswers.map((answer,idx ) => {\n\n                    return(\n                        <button className= \"answer_box\" key= {idx} onClick={() => handleAnswer(answer)} dangerouslySetInnerHTML={{__html: answer}}/>\n                    );})}\n            </div>\n        </>\n    )\n}","import React, {useState, useEffect} from \"react\";\r\nimport './QuestionScreen.scss'\r\nimport {Questionaire} from \"../Questionaire/Questionaire.js\";\r\n\r\n\r\n\r\nexport const QuestionsScreen = ({categoryDifficulty,id,questionsQuantity}) => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentIndex, setCurrentIndex] = useState(0)\r\n    const [score, setScore] = useState(0)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(`https://opentdb.com/api.php?amount=${questionsQuantity}&category=${id}&difficulty=${categoryDifficulty}`)\r\n            .then((result) => result.json())\r\n            .then((data) => {\r\n                setQuestions(data.results);\r\n            })\r\n\r\n    }, [])\r\n\r\n    const handleAnswer = (answer) => {\r\n        setTimeout (()=> {\r\n            const newIndex = currentIndex + 1;\r\n            setCurrentIndex(newIndex);\r\n\r\n            if (answer === questions[currentIndex].correct_answer) {\r\n                // increase score\r\n                setScore(score + 1);\r\n            }\r\n        },300)\r\n\r\n    }\r\n    const handleRetryButton = ()=> {\r\n        // to zmieniÄ‡\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n    return questions.length > 0 ? (\r\n        <div className=\"container\">\r\n            {currentIndex >= questions.length ? (\r\n                <h1 className=\"loading_and_score\">\r\n\r\n                    Congratulations! <br/><br/>\r\n                    Your score is {score} !\r\n                    <button onClick={handleRetryButton} className=\"answer_box button_try_again\">\r\n                        <p className=\"button_try_again_text\">Click here to try again!</p>\r\n                    </button>\r\n                </h1>\r\n            ) : (\r\n                <Questionaire  questionsQuantity={questionsQuantity} currentIndex = {currentIndex}data={questions[currentIndex]}  handleAnswer={handleAnswer}/>\r\n            )}\r\n        </div>\r\n    ) : (\r\n        <div className=\"container\">\r\n            <div className=\"lds-roller\">\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionsScreen;\r\n","import React, {useState} from \"react\";\r\nimport './ChoseDifficulty.scss'\r\n\r\nexport const ChoseDifficulty = ({categoryDifficulty, setCategoryDifficulty, handleDificultyChose}) => {\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='difficulty_box'>\r\n                <h1 className=\"header\">Chose difficulty:</h1>\r\n                <button className=\"difficulty_button\" onClick={() => handleDificultyChose(\"easy\")}>Easy</button>\r\n                <button className=\"difficulty_button\" onClick={() => handleDificultyChose(\"medium\")}>Medium</button>\r\n                <button className=\"difficulty_button\" onClick={() => handleDificultyChose(\"hard\")}>Hard</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './ChoseQuestionsQuanity.scss'\r\n\r\nexport const ChoseQuestionsQuanity = ({handleQuestionQuantity, questionsQuantity}) => {\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='quantity_box'>\r\n                    <h1 className=\"header\">Chose questions quantity:</h1>\r\n                    <button className=\"quantity_button\" onClick={() => handleQuestionQuantity(5)}>5</button>\r\n                    <button className=\"quantity_button\" onClick={() => handleQuestionQuantity(10)}>10</button>\r\n                    <button className=\"quantity_button\" onClick={() => handleQuestionQuantity(15)}>15</button>\r\n                    <button className=\"quantity_button\" onClick={() => handleQuestionQuantity(20)}>20</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\nimport './App.scss';\nimport QuestionsScreen from \"../QuestionsScreen/QuestionScreen\";\nimport {ChoseDifficulty} from \"../ChoseDificulty/ChoseDifficulty\";\nimport {ChoseQuestionsQuanity} from \"../ChoseQuestionsQuantity/ChoseQuestionsQuanity\";\n\nconst App = () => {\n    const [categories, setCategories] = useState([])\n    const [categoryChosen, setCategoryChosen] = useState(false)\n    const [categoryID, setCategoryID] = useState(null)\n    const [categoryDifficulty, setCategoryDifficulty] = useState(null);\n    const [questionsQuantity, setQuestionQuantity] = useState(null)\n\n    useEffect(() => {\n\n        fetch('https://opentdb.com/api_category.php')\n            .then((result) => result.json())\n            .then((data) => {\n                setCategories(data.trivia_categories)\n            })\n\n    }, [])\n\n    const handleClick = (id) => {\n        setCategoryChosen(true);\n        setCategoryID(id);\n\n    }\n\n    const handleDifficultyChose = (id) => {\n        setCategoryDifficulty(id)\n    }\n\n    const handleQuestionQuantity = (number) => {\n        setQuestionQuantity(number)\n    }\n    // return (\n\n    // )\n\n    // <QuestionsScreen categoryDifficulty={categoryDifficulty} id={categoryID}/>\n\n    return categoryChosen !== true ? (\n        <div className=\"container\">\n            <h1 className=\"header\">Welcome to trivia api quiz!</h1>\n            <h2 className='header'>Chose your category:</h2>\n            <div className=\"category_box\">\n                {categories.map((trivia_categories, idx) => {\n\n                        return (\n                            <>\n                                <button className=\"category_button\" onClick={() => handleClick(trivia_categories.id)}\n                                        key={idx} dangerouslySetInnerHTML={{__html: trivia_categories.name}}/>\n                            </>\n                        )\n                    }\n                )}\n            </div>\n        </div>\n    ) : (categoryDifficulty === null ? (\n            <>\n                <ChoseDifficulty categoryDifficulty={categoryDifficulty} setCategoryDifficulty={setCategoryDifficulty}\n                                 handleDificultyChose={handleDifficultyChose}/>\n            </>\n        ) : (questionsQuantity === null ? (\n                <>\n                    <ChoseQuestionsQuanity handleQuestionQuantity={handleQuestionQuantity}\n                                           questionsQuantity={questionsQuantity}/>\n                </>\n            ) : (\n                <>\n                    <QuestionsScreen categoryDifficulty={categoryDifficulty} id={categoryID}\n                                     questionsQuantity={questionsQuantity}/>\n                </>\n            )\n        )\n    )\n\n\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App/App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById(\"body\")\n);\n\n"],"sourceRoot":""}
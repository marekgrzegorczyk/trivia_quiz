{"version":3,"sources":["components/Questionaire/Questionaire.js","components/QuestionsScreen/QuestionScreen.js","components/App/App.js","index.js"],"names":["Questionaire","showAnswers","handleAnswer","currentIndex","data","question","correct_answer","incorrect_answers","shuffledAnswers","sort","Math","random","className","dangerouslySetInnerHTML","__html","map","answer","idx","onClick","QuestionsScreen","id","useState","questions","setQuestions","setCurrentIndex","score","setScore","useEffect","fetch","then","result","json","results","length","window","location","reload","setTimeout","App","categories","setCategories","categoryChosen","setCategoryChosen","categoryID","setCategoryID","trivia_categories","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAIaA,EAAe,SAAC,GAAkG,EAAjGC,YAAkG,IAAtFC,EAAqF,EAArFA,aAAcC,EAAuE,EAAvEA,aAAuE,IAAzDC,KAAOC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,kBAG7FC,EAAkB,CAACF,GAAD,mBAAoBC,IAAmBE,MAAK,kBAAMC,KAAKC,SAAW,MAG1F,OACI,qCAGI,sBAAKC,UAAU,eAAf,UACI,8BAAIT,EAAe,EAAnB,SACA,oBAAIS,UAAU,2BAA2BC,wBAAyB,CAACC,OAAQT,QAE/E,qBAAKO,UAAU,SAAf,SACKJ,EAAgBO,KAAI,SAACC,EAAOC,GAEzB,OACI,wBAAQL,UAAW,aAAwBM,QAAS,kBAAMhB,EAAac,IAASH,wBAAyB,CAACC,OAAQE,IAA5EC,YCiD/CE,EAjEgB,SAAC,GAAU,IAATC,EAAQ,EAARA,GAC7B,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOlB,EAAP,KAAqBqB,EAArB,KACA,EAA0BH,mBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAIAC,qBAAU,WACNC,MAAM,kDAAD,OAAmDR,IACnDS,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACzB,GACHmB,EAAanB,EAAK4B,cAG3B,IAoBH,OAAOV,EAAUW,OAAS,EACtB,qBAAKrB,UAAU,YAAf,SACKT,GAAgBmB,EAAUW,OACvB,qBAAIrB,UAAU,oBAAd,8BAEqB,uBAAK,uBAF1B,iBAGmBa,EAHnB,KAII,wBAAQP,QAbE,WAEtBgB,OAAOC,SAASC,UAWgCxB,UAAU,8BAA9C,SACI,mBAAGA,UAAU,wBAAb,2CAIR,cAAC,EAAD,CAAeT,aAAgBA,EAAaC,KAAMkB,EAAUnB,GAAgBD,aA9BnE,SAACc,GAClBqB,YAAY,WAERb,EADiBrB,EAAe,GAG5Ba,IAAWM,EAAUnB,GAAcG,gBAEnCoB,EAASD,EAAQ,KAEvB,UAyBF,qBAAKb,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,8BCnBD0B,EA1CH,WACR,MAAmCjB,mBAAS,IAA5C,mBAAOkB,EAAP,KAAkBC,EAAlB,KACA,EAA2CnB,oBAAS,GAApD,mBAAOoB,EAAP,KAAsBC,EAAtB,KACA,EAAmCrB,mBAAS,MAA5C,mBAAOsB,EAAP,KAAkBC,EAAlB,KAEAjB,qBAAU,WAENC,MAAM,wCACDC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACzB,GACHoC,EAAcpC,EAAKyC,wBAG5B,IAOH,OAA0B,IAAnBJ,EACH,sBAAK7B,UAAU,YAAf,UACI,6DACA,uDACA,qBAAKA,UAAU,eAAf,SACK2B,EAAWxB,KAAI,SAAC8B,EAAkB5B,GAEnC,OACI,mCACI,wBAASL,UAAU,kBAAkBM,QAAS,kBAd7CE,EAc8DyB,EAAkBzB,GAbjGsB,GAAkB,QAClBE,EAAcxB,GAFE,IAACA,GAc+FP,wBAAyB,CAACC,OAAQ+B,EAAkBC,OAAzD7B,aAO3G,mCACI,cAAC,EAAD,CAAiBG,GAAIuB,OCnCjCI,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.fcf76d30.chunk.js","sourcesContent":["import React from \"react\";\nimport './Questionaire.scss'\n\n\nexport const Questionaire = ({showAnswers,handleAnswer, currentIndex, data: {question, correct_answer, incorrect_answers}}) => {\n\n\n    const shuffledAnswers = [correct_answer, ...incorrect_answers].sort(() => Math.random() - 0.5);\n\n\n    return (\n        <>\n\n\n            <div className=\"question_box\">\n                <p>{currentIndex + 1 }/10</p>\n                <h1 className=\"question_box_description\" dangerouslySetInnerHTML={{__html: question}}/>\n            </div>\n            <div className=\"answer\">\n                {shuffledAnswers.map((answer,idx ) => {\n\n                    return(\n                        <button className= \"answer_box\" key= {idx} onClick={() => handleAnswer(answer)} dangerouslySetInnerHTML={{__html: answer}}/>\n                    );})}\n            </div>\n        </>\n    )\n}","import React, {useState, useEffect} from \"react\";\r\nimport './QuestionScreen.scss'\r\nimport {Questionaire} from \"../Questionaire/Questionaire.js\";\r\n\r\n\r\n\r\nexport const QuestionsScreen = ({id}) => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentIndex, setCurrentIndex] = useState(0)\r\n    const [score, setScore] = useState(0)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(`https://opentdb.com/api.php?amount=10&category=${id}`)\r\n            .then((result) => result.json())\r\n            .then((data) => {\r\n                setQuestions(data.results);\r\n            })\r\n\r\n    }, [])\r\n\r\n    const handleAnswer = (answer) => {\r\n        setTimeout (()=> {\r\n            const newIndex = currentIndex + 1;\r\n            setCurrentIndex(newIndex);\r\n\r\n            if (answer === questions[currentIndex].correct_answer) {\r\n                // increase score\r\n                setScore(score + 1);\r\n            }\r\n        },500)\r\n\r\n    }\r\n    const handleRetryButton = ()=> {\r\n        // to zmieniÄ‡\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n    return questions.length > 0 ? (\r\n        <div className=\"container\">\r\n            {currentIndex >= questions.length ? (\r\n                <h1 className=\"loading_and_score\">\r\n\r\n                    Congratulations! <br/><br/>\r\n                    Your score is {score} !\r\n                    <button onClick={handleRetryButton} className=\"answer_box button_try_again\">\r\n                        <p className=\"button_try_again_text\">Click here to try again!</p>\r\n                    </button>\r\n                </h1>\r\n            ) : (\r\n                <Questionaire  currentIndex = {currentIndex}data={questions[currentIndex]}  handleAnswer={handleAnswer}/>\r\n            )}\r\n        </div>\r\n    ) : (\r\n        <div className=\"container\">\r\n            <div className=\"lds-roller\">\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionsScreen;\r\n","import React, {useEffect, useState} from \"react\";\nimport './App.scss';\nimport QuestionsScreen from \"../QuestionsScreen/QuestionScreen\";\n\nconst App = ()=> {\n    const [categories,setCategories] = useState([])\n    const [categoryChosen,setCategoryChosen] = useState(false)\n    const [categoryID,setCategoryID] = useState(null)\n\n    useEffect(() => {\n\n        fetch('https://opentdb.com/api_category.php')\n            .then((result) => result.json())\n            .then((data) => {\n                setCategories(data.trivia_categories)\n            })\n\n    }, [])\n\n    const handleClick = (id) => {\n        setCategoryChosen(true);\n        setCategoryID(id);\n    }\n\n    return categoryChosen !== true ? (\n        <div className=\"container\">\n            <h1>Welcome to trivia api quiz!</h1>\n            <h2>Choose your category:</h2>\n            <div className=\"category_box\">\n                {categories.map((trivia_categories,idx)=>{\n\n                return (\n                    <>\n                        <button  className=\"category_button\" onClick={()=> handleClick(trivia_categories.id)} key={idx} dangerouslySetInnerHTML={{__html: trivia_categories.name}}/>\n                    </>\n                )}\n                )}\n            </div>\n        </div>\n    ) : (\n        <>\n            <QuestionsScreen id={categoryID}/>\n        </>\n    )\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App/App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById(\"body\")\n);\n\n"],"sourceRoot":""}